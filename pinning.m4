dnl
dnl pinning.m4
dnl
dnl   Copyright (c) 2008 by Christian Dietrich <stettberger@dokucode.de>
dnl   Copyright (c) 2008 by Stefan Siegl <stesie@brokenpipe.de>
dnl   Copyright (c) 2008 by Jochen Roessner <jochen@lugrot.de>
dnl  
dnl   This program is free software; you can redistribute it and/or modify
dnl   it under the terms of the GNU General Public License version 2 as
dnl   published by the Free Software Foundation.
dnl  
dnl   This program is distributed in the hope that it will be useful,
dnl   but WITHOUT ANY WARRANTY; without even the implied warranty of
dnl   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
dnl   GNU General Public License for more details.
dnl  
dnl   You should have received a copy of the GNU General Public License
dnl   along with this program; if not, write to the Free Software
dnl   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
dnl  
dnl   For more information on the GPL, please go to:
dnl   http://www.gnu.org/copyleft/gpl.html
dnl
/* This file has been generated by pinning.m4 automatically.
   Please do not modify it, edit the m4 script instead. */

divert(-1)dnl

define(`port_mask_A', 0)
define(`port_mask_B', 0)
define(`port_mask_C', 0)
define(`port_mask_D', 0)

changecom(`//')
define(`PM', `port_mask_'$1)dnl
define(`pin', `dnl
define(`pinname', translit(substr(`$2', 1, 1), `a-z', `A-Z'))dnl
define(`pinnum', substr(`$2', 2, 1))dnl
dnl
#define translit(`$1',`a-z', `A-Z')_PORT pinname
#define translit(`$1',`a-z', `A-Z')_PIN pinnum
#define HAVE_'translit(`$1',`a-z', `A-Z')` 1
dnl
define(`port_mask_'pinname, eval(PM(pinname) | (1 << pinnum)))dnl
')
divert(1)
`#define _PORT_CHAR(character) PORT ## character
#define PORT_CHAR(character) _PORT_CHAR(character)

#define _PIN_CHAR(character) PIN ## character
#define PIN_CHAR(character) _PIN_CHAR(character)
 
#define _DDR_CHAR(character) DDR ## character
#define DDR_CHAR(character) _DDR_CHAR(character)


#define DDR_CONFIG_IN(pin)  DDR_CHAR( pin ## _PORT) &= ~_BV((pin ## _PIN))
#define DDR_CONFIG_OUT(pin)  DDR_CHAR( pin ## _PORT) |= _BV((pin ## _PIN))

#define PIN_BV(pin) (_BV(pin ## _PIN))
#define PIN_NR(pin) (pin ## _PIN)
#define PIN_HIGH(pin) (PIN_CHAR(pin ## _PORT) & _BV(pin ## _PIN))
#define PIN_SET(pin) PORT_CHAR(pin ## _PORT) |= _BV(pin ## _PIN)
#define PIN_CLEAR(pin) PORT_CHAR(pin ## _PORT) &= ~_BV(pin ## _PIN)
#define PIN_TOGGLE(pin) PORT_CHAR(pin ## _PORT) ^= _BV(pin ## _PIN)
#define PIN_PULSE(pin) do { PORT_CHAR(pin ## _PORT) &= ~_BV(pin ## _PIN); \
                              PORT_CHAR(pin ## _PORT) ^= _BV(pin ## _PIN); } while(0)'

divert(0)dnl
dnl
ifelse(MCU, `atmega8', `dnl

  ifdef(`conf_RFM12', `dnl
    /* spi defines */
    pin(SPI_MOSI, PB3)
    pin(SPI_MISO, PB4)
    pin(SPI_SCK, PB5)

    /* port the rfm12 module CS is attached to */
    pin(SPI_CS_RFM12, PB2)

    /* port the LEDS for rfm12 txrx attached to */
    pin(RFM12_TX_PIN, PB6)
    pin(RFM12_RX_PIN, PB7)
  ')

  ifdef(`conf_ZBUS', `dnl
    /* port config for zbus */
    pin(ZBUS_RXTX_PIN, PD2)
    pin(ZBUS_RX_PIN, PD6)
    pin(ZBUS_TX_PIN, PD7)
  ')
')

ifelse(MCU, `atmega644', `dnl
  /* spi defines */
  pin(SPI_MOSI, PB5)
  pin(SPI_MISO, PB6)
  pin(SPI_SCK, PB7)

  ifdef(`conf_RFM12', `dnl
    /* port the rfm12 module CS is attached to */
    pin(SPI_CS_RFM12, PC3)

    /* port the LEDS for rfm12 txrx attached to */
    pin(RFM12_TX_PIN, PD4)
    pin(RFM12_RX_PIN, PD5)
  ')

  ifdef(`conf_ZBUS', `dnl
    /* port config for zbus */
    pin(ZBUS_RXTX_PIN, PC2)
    pin(ZBUS_RX_PIN, PD4)
    pin(ZBUS_TX_PIN, PD5)
  ')
')

ifdef(`conf_ENC28J60', `dnl
  /* port the enc28j60 is attached to
   * ATTENTION: EITHER USE SS OR MAKE SURE, SS IS PULLED HIGH OR AN OUTPUT! */

  pin(SPI_CS_NET, PB4)
')dnl

ifdef(`conf_DATAFLASH', `dnl
  /* port the dataflash CS is attached to */
  pin(SPI_CS_DF, PB1)
')dnl

ifdef(`conf_MODBUS', `dnl
  /* modbus tx  */
  pin(MODBUS_TX, PC2)
')dnl

ifdef(`conf_PS2', `dnl
  /* ps/2 pins */
  pin(PS2_DATA, PA7)
  pin(PS2_CLOCK, PA6)
')dnl

ifdef(`conf_HC595', `dnl
  /* pins for the hc595 shift register */
  pin(HC595_DATA, PB6)
  pin(HC595_CLOCK, PB2)
  pin(HC595_STORE, PB7)
')dnl

ifdef(`conf_HC165', `dnl
  /* pins for the hc165 shift register */
  pin(HC165_DATA, PB0)
  pin(HC165_CLOCK, PB2)
  pin(HC165_LOAD, PB1)
')dnl

dnl /* enc28j60 int line */
dnl pin(INT_PIN, PB3)
dnl /* enc28j60 wol line */
dnl pin(WOL_PIN, PB2)

ifdef(`conf_ONEWIRE', `dnl
  /* onewire support */
  pin(ONEWIRE, PD6)
')dnl

ifdef(`conf_RC5', `dnl
  /* rc5 support */
  pin(RC5_SEND, PD4)
')dnl

ifdef(`conf_FS20',  `dnl
  /* fs20 support */
  pin(FS20_SEND, PB2)
  /* DO NOT CHANGE PIN!  USES INTERNAL COMPARATOR! */
  pin(FS20_RECV, PB3)
')dnl

#define PORTIO_MASK_A eval(255 - port_mask_A)
#define PORTIO_MASK_B eval(255 - port_mask_B)
#define PORTIO_MASK_C eval(255 - port_mask_C)
#define PORTIO_MASK_D eval(255 - port_mask_D)

