dnl
dnl ecmd_defs.m4
dnl
dnl This m4 script uses three divert levels, these are essentially:
dnl   1: function prototypes
dnl   2: char array in program space
dnl   3: the function list
dnl
dnl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
dnl
dnl   Copyright (c) 2007 by Christian Dietrich <stettberger@dokucode.de>
dnl   Copyright (c) 2007,2008 by Stefan Siegl <stesie@brokenpipe.de>
dnl  
dnl   This program is free software; you can redistribute it and/or modify
dnl   it under the terms of the GNU General Public License version 2 as
dnl   published by the Free Software Foundation.
dnl  
dnl   This program is distributed in the hope that it will be useful,
dnl   but WITHOUT ANY WARRANTY; without even the implied warranty of
dnl   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
dnl   GNU General Public License for more details.
dnl  
dnl   You should have received a copy of the GNU General Public License
dnl   along with this program; if not, write to the Free Software
dnl   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
dnl  
dnl   For more information on the GPL, please go to:
dnl   http://www.gnu.org/copyleft/gpl.html
dnl
divert(0)dnl
/* This file has been generated by ecmd_defs.m4 automatically.
   Please do not modify it, edit the m4 script instead. */
divert(1)dnl

/* Function prototypes follow */
divert(2)dnl

/* Char array definitions follow */
divert(3)dnl

/* Definition of function pointer array follows */
const struct ecmd_command_t PROGMEM ecmd_cmds[] = {
divert(-1)dnl

define(`ecmd_feature', `dnl
divert(1)int16_t parse_cmd_$1 (char *cmd, char *output, uint16_t len);
divert(2)const char PROGMEM ecmd_$1_text[] = $2;
divert(3)	{ ecmd_$1_text, parse_cmd_$1 },
divert(-1)')

define(`ecmd_ifdef', `dnl
divert(1)#ifdef $1
divert(2)#ifdef $1
divert(3)#ifdef $1
divert(-1)')

define(`ecmd_ifndef', `dnl
divert(1)#ifndef $1
divert(2)#ifndef $1
divert(3)#ifndef $1
divert(-1)')

define(`ecmd_endif', `divert(1)#endif
divert(2)#endif
divert(3)#endif
divert(-1)')

ecmd_ifndef(TEENSY_SUPPORT)
  ecmd_ifdef(ENC28J60_SUPPORT)
    ecmd_feature(show_mac, "show mac")
    ecmd_feature(mac, "mac ")
  ecmd_endif()
  ecmd_feature(show_ip, "show ip")
  ecmd_ifndef(IPV6_SUPPORT)
    ecmd_feature(show_netmask, "show netmask")
  ecmd_endif()
  ecmd_feature(show_gw, "show gw")
  ecmd_feature(show_version, "show version")

  ecmd_ifndef(IPV6_SUPPORT)
    ecmd_ifndef(BOOTP_SUPPORT)
      ecmd_feature(ip, "ip ")
      ecmd_feature(netmask, "netmask ")
      ecmd_feature(gw, "gw ")
    ecmd_endif()
  ecmd_endif()

  ecmd_feature(reset, "reset")
  ecmd_feature(wdreset, "wdreset")
ecmd_endif()

ecmd_feature(bootloader, "bootloader")

ecmd_ifdef(PORTIO_SUPPORT)
  ecmd_feature(io_set_ddr, "io set ddr")
  ecmd_feature(io_get_ddr, "io get ddr")
  ecmd_feature(io_set_port, "io set port")
  ecmd_feature(io_get_port, "io get port")
  ecmd_feature(io_get_pin, "io get pin")
ecmd_endif()

ecmd_ifdef(PORTIO_SIMPLE_SUPPORT)
  ecmd_feature(io, "io ")
ecmd_endif()

ecmd_ifdef(NAMED_PIN_SUPPORT)
  ecmd_feature(pin_get, "pin get")
  ecmd_feature(pin_set, "pin set")
  ecmd_feature(pin_toggle, "pin toggle")
ecmd_endif()

ecmd_ifdef(FS20_SUPPORT)
  ecmd_ifdef(FS20_SUPPORT_SEND)
    ecmd_feature(fs20_send, "fs20 send")
  ecmd_endif()

  ecmd_ifdef(FS20_SUPPORT_RECEIVE)
    ecmd_feature(fs20_receive, "fs20 receive")
  ecmd_endif()

  ecmd_ifdef(FS20_SUPPORT_RECEIVE_WS300)
    ecmd_feature(fs20_ws300, "fs20 ws300")
  ecmd_endif()
ecmd_endif()

ecmd_ifdef(HD44780_SUPPORT)
  ecmd_feature(lcd_clear, "lcd clear")
  ecmd_feature(lcd_write, "lcd write")
  ecmd_feature(lcd_goto, "lcd goto")
  ecmd_feature(lcd_char, "lcd char")
  ecmd_feature(lcd_init, "lcd init")
  ecmd_feature(lcd_shift, "lcd shift")
ecmd_endif()

ecmd_ifdef(ONEWIRE_SUPPORT)
  ecmd_feature(onewire_list, "1w list")
  ecmd_feature(onewire_get, "1w get")
  ecmd_feature(onewire_convert, "1w convert")
ecmd_endif()

ecmd_ifdef(RC5_SUPPORT)
  ecmd_feature(ir_send, "ir send")
  ecmd_feature(ir_receive, "ir receive")
ecmd_endif()

ecmd_ifdef(DNS_SUPPORT)
  ecmd_feature(nslookup, "nslookup ")
  ecmd_feature(show_dns, "show dns")
  ecmd_ifndef(BOOTP_SUPPORT)
    ecmd_feature(dns, "dns ")
  ecmd_endif()
ecmd_endif()

ecmd_ifdef(CLOCK_SUPPORT)
  ecmd_feature(time, "time")
  ecmd_feature(date, "date")
ecmd_endif()

ecmd_ifdef(ADC_SUPPORT)
  ecmd_feature(adc_get, "adc get")
ecmd_endif()

ecmd_ifdef(DATAFLASH_SUPPORT)
  ecmd_feature(df_status, "df status")

  ecmd_feature(fs_format, "fs format")
  ecmd_feature(fs_list, "fs list")
  ecmd_feature(fs_mkfile, "fs mkfile ")
  ecmd_feature(fs_remove, "fs remove ")
ecmd_endif()

ecmd_ifndef(TEENSY_SUPPORT)
  ecmd_ifdef(RFM12_SUPPORT)
    ecmd_feature(rfm12_status, "rfm12 status")
    ecmd_feature(rfm12_setbaud, "rfm12 setbaud")
  ecmd_endif()
ecmd_endif()

ecmd_ifndef(TEENSY_SUPPORT)
  ecmd_feature(d, "d ")

  ecmd_ifdef(USART_SUPPORT)
    ecmd_feature(usart_baud, "usart baud")
  ecmd_endif()

  ecmd_ifdef(MODBUS_SUPPORT)
    ecmd_feature(modbus_recv, "mb recv ")
  ecmd_endif()
ecmd_endif()

divert(3)dnl
        { NULL, NULL }
};
divert(-1)dnl
dnl yippie, we're done!
